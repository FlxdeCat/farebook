package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/FlxdeCat/faREbook-backend/graph/model"
	"github.com/FlxdeCat/faREbook-backend/helper"
	"github.com/FlxdeCat/faREbook-backend/service"
)

// LikePost is the resolver for the likePost field.
func (r *mutationResolver) LikePost(ctx context.Context, newPostLike model.NewPostLike) (*model.PostLike, error) {
	// panic(fmt.Errorf("not implemented: LikePost - likePost"))
	id, err := helper.ExtractUserIDFromJWT(newPostLike.UserJwt)
	if err != nil {
		return nil, err
	}
	postLike := &model.PostLike{
		UserID: id,
		PostID: newPostLike.PostID,
	}
	return postLike, r.DB.Create(&postLike).Error
}

// UnlikePost is the resolver for the unlikePost field.
func (r *mutationResolver) UnlikePost(ctx context.Context, newPostLike model.NewPostLike) (bool, error) {
	// panic(fmt.Errorf("not implemented: UnlikePost - unlikePost"))
	id, err := helper.ExtractUserIDFromJWT(newPostLike.UserJwt)
	if err != nil {
		return false, err
	}
	var postLike *model.PostLike
	return true, r.DB.Delete(&postLike, "user_id = ? and post_id = ?", id, newPostLike.PostID).Error
}

// Post is the resolver for the post field.
func (r *postLikeResolver) Post(ctx context.Context, obj *model.PostLike) (*model.Post, error) {
	// panic(fmt.Errorf("not implemented: Post - post"))
	return service.GetPost(ctx, obj.PostID)
}

// User is the resolver for the user field.
func (r *postLikeResolver) User(ctx context.Context, obj *model.PostLike) (*model.User, error) {
	// panic(fmt.Errorf("not implemented: User - user"))
	return service.GetUser(ctx, obj.UserID)
}

// GetUserLikePost is the resolver for the getUserLikePost field.
func (r *queryResolver) GetUserLikePost(ctx context.Context, newPostLike model.NewPostLike) (bool, error) {
	// panic(fmt.Errorf("not implemented: GetUserLikePost - getUserLikePost"))
	id, err := helper.ExtractUserIDFromJWT(newPostLike.UserJwt)
	if err != nil {
		return false, nil
	}
	var postLike *model.PostLike
	if err := r.DB.First(&postLike, "user_id = ? and post_id = ?", id, newPostLike.PostID).Error; err != nil {
		return false, nil
	} else {
		return true, nil
	}
}

// GetPostLikes is the resolver for the getPostLikes field.
func (r *queryResolver) GetPostLikes(ctx context.Context, postID string) (int, error) {
	// panic(fmt.Errorf("not implemented: GetPostLikes - getPostLikes"))
	var postLikes []*model.PostLike
	if err := r.DB.Find(&postLikes, "post_id = ?", postID).Error; err != nil {
		return 0, nil
	}
	return len(postLikes), nil
}

// PostLike returns PostLikeResolver implementation.
func (r *Resolver) PostLike() PostLikeResolver { return &postLikeResolver{r} }

type postLikeResolver struct{ *Resolver }

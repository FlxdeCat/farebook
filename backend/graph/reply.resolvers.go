package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"time"

	"github.com/FlxdeCat/faREbook-backend/graph/model"
	"github.com/FlxdeCat/faREbook-backend/helper"
	"github.com/FlxdeCat/faREbook-backend/service"
	"github.com/google/uuid"
)

// CreateReply is the resolver for the createReply field.
func (r *mutationResolver) CreateReply(ctx context.Context, newReply model.NewReply) (*model.Reply, error) {
	// panic(fmt.Errorf("not implemented: CreateReply - createReply"))
	id, err := helper.ExtractUserIDFromJWT(newReply.UserJwt)
	if err != nil {
		return nil, err
	}
	reply := &model.Reply{
		ID:        uuid.NewString(),
		ReplierID: id,
		CommentID: newReply.CommentID,
		Content:   newReply.Content,
		CreatedAt: time.Now(),
	}
	return reply, r.DB.Create(&reply).Error
}

// GetCommentReply is the resolver for the getCommentReply field.
func (r *queryResolver) GetCommentReply(ctx context.Context, commentID string) ([]*model.Reply, error) {
	// panic(fmt.Errorf("not implemented: GetCommentReply - getCommentReply"))
	var replies []*model.Reply
	if err := r.DB.Order("created_at ASC").Find(&replies, "comment_id = ?", commentID).Error; err != nil {
		return nil, err
	}
	return replies, nil
}

// GetCommentReplies is the resolver for the getCommentReplies field.
func (r *queryResolver) GetCommentReplies(ctx context.Context, commentID string) (int, error) {
	// panic(fmt.Errorf("not implemented: GetCommentReplies - getCommentReplies"))
	var replies []*model.Reply
	if err := r.DB.Order("created_at ASC").Find(&replies, "comment_id = ?", commentID).Error; err != nil {
		return 0, nil
	}
	return len(replies), nil
}

// Comment is the resolver for the comment field.
func (r *replyResolver) Comment(ctx context.Context, obj *model.Reply) (*model.Comment, error) {
	// panic(fmt.Errorf("not implemented: Comment - comment"))
	return service.GetComment(ctx, obj.CommentID)
}

// Replier is the resolver for the replier field.
func (r *replyResolver) Replier(ctx context.Context, obj *model.Reply) (*model.User, error) {
	// panic(fmt.Errorf("not implemented: Replier - replier"))
	return service.GetUser(ctx, obj.ReplierID)
}

// Reply returns ReplyResolver implementation.
func (r *Resolver) Reply() ReplyResolver { return &replyResolver{r} }

type replyResolver struct{ *Resolver }

package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"strings"

	"github.com/FlxdeCat/faREbook-backend/graph/model"
	"github.com/google/uuid"
)

// CreateGroup is the resolver for the createGroup field.
func (r *mutationResolver) CreateGroup(ctx context.Context, newGroup model.NewGroup) (*model.Group, error) {
	// panic(fmt.Errorf("not implemented: CreateGroup - createGroup"))
	group := &model.Group{
		ID:      uuid.NewString(),
		Name:    newGroup.Name,
		Privacy: newGroup.Privacy,
	}
	return group, r.DB.Create(&group).Error
}

// EditGroup is the resolver for the editGroup field.
func (r *mutationResolver) EditGroup(ctx context.Context, id string, group model.NewGroup) (*model.Group, error) {
	// panic(fmt.Errorf("not implemented: EditGroup - editGroup"))
	var editGroup *model.Group
	if err := r.DB.First(&editGroup, "id = ?", id).Error; err != nil {
		return nil, err
	} else {
		editGroup.Name = group.Name
		editGroup.Privacy = group.Privacy
	}
	return editGroup, r.DB.Save(&editGroup).Error
}

// DeleteGroup is the resolver for the deleteGroup field.
func (r *mutationResolver) DeleteGroup(ctx context.Context, id string) (*model.Group, error) {
	// panic(fmt.Errorf("not implemented: DeleteGroup - deleteGroup"))
	var group *model.Group
	return group, r.DB.Delete(&group, "id = ?", id).Error
}

// GetGroupOnID is the resolver for the getGroupOnID field.
func (r *queryResolver) GetGroupOnID(ctx context.Context, id string) (*model.Group, error) {
	// panic(fmt.Errorf("not implemented: GetGroupOnID - getGroupOnID"))
	var group *model.Group
	return group, r.DB.First(&group, "id = ?", id).Error
}

// GetAllPublicGroup is the resolver for the getAllPublicGroup field.
func (r *queryResolver) GetAllPublicGroup(ctx context.Context) ([]*model.Group, error) {
	// panic(fmt.Errorf("not implemented: GetAllPublicGroup - getAllPublicGroup"))
	var groups []*model.Group
	return groups, r.DB.Find(&groups, "privacy = 'Public'").Error
}

// GetAllSearchPublicGroup is the resolver for the getAllSearchPublicGroup field.
func (r *queryResolver) GetAllSearchPublicGroup(ctx context.Context, search string) ([]*model.Group, error) {
	// panic(fmt.Errorf("not implemented: GetAllSearchPublicGroup - getAllSearchPublicGroup"))
	var groups []*model.Group
	var searchGroups []*model.Group
	if err := r.DB.Find(&groups, "privacy = 'Public'").Error; err != nil {
		return nil, err
	}
	for _, group := range groups {
		if strings.Contains(strings.ToLower(group.Name), strings.ToLower(search)) {
			searchGroups = append(searchGroups, group)
		}
	}
	return searchGroups, nil
}

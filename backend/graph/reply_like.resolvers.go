package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/FlxdeCat/faREbook-backend/graph/model"
	"github.com/FlxdeCat/faREbook-backend/helper"
	"github.com/FlxdeCat/faREbook-backend/service"
)

// LikeReply is the resolver for the likeReply field.
func (r *mutationResolver) LikeReply(ctx context.Context, newReplyLike model.NewReplyLike) (*model.ReplyLike, error) {
	// panic(fmt.Errorf("not implemented: LikeReply - likeReply"))
	id, err := helper.ExtractUserIDFromJWT(newReplyLike.UserJwt)
	if err != nil {
		return nil, err
	}
	replyLike := &model.ReplyLike{
		UserID:  id,
		ReplyID: newReplyLike.ReplyID,
	}
	return replyLike, r.DB.Create(&replyLike).Error
}

// UnlikeReply is the resolver for the unlikeReply field.
func (r *mutationResolver) UnlikeReply(ctx context.Context, newReplyLike model.NewReplyLike) (bool, error) {
	// panic(fmt.Errorf("not implemented: UnlikeReply - unlikeReply"))
	id, err := helper.ExtractUserIDFromJWT(newReplyLike.UserJwt)
	if err != nil {
		return false, err
	}
	var replyLike *model.ReplyLike
	return true, r.DB.Delete(&replyLike, "user_id = ? and reply_id = ?", id, newReplyLike.ReplyID).Error
}

// GetUserLikeReply is the resolver for the getUserLikeReply field.
func (r *queryResolver) GetUserLikeReply(ctx context.Context, newReplyLike model.NewReplyLike) (bool, error) {
	// panic(fmt.Errorf("not implemented: GetUserLikeReply - getUserLikeReply"))
	id, err := helper.ExtractUserIDFromJWT(newReplyLike.UserJwt)
	if err != nil {
		return false, nil
	}
	var replyLike *model.ReplyLike
	if err := r.DB.First(&replyLike, "user_id = ? and reply_id = ?", id, newReplyLike.ReplyID).Error; err != nil {
		return false, nil
	} else {
		return true, nil
	}
}

// GetReplyLikes is the resolver for the getReplyLikes field.
func (r *queryResolver) GetReplyLikes(ctx context.Context, replyID string) (int, error) {
	// panic(fmt.Errorf("not implemented: GetReplyLikes - getReplyLikes"))
	var replyLikes []*model.ReplyLike
	if err := r.DB.Find(&replyLikes, "reply_id = ?", replyID).Error; err != nil {
		return 0, nil
	}
	return len(replyLikes), nil
}

// Reply is the resolver for the reply field.
func (r *replyLikeResolver) Reply(ctx context.Context, obj *model.ReplyLike) (*model.Reply, error) {
	// panic(fmt.Errorf("not implemented: Reply - reply"))
	return service.GetReply(ctx, obj.ReplyID)
}

// User is the resolver for the user field.
func (r *replyLikeResolver) User(ctx context.Context, obj *model.ReplyLike) (*model.User, error) {
	// panic(fmt.Errorf("not implemented: User - user"))
	return service.GetUser(ctx, obj.UserID)
}

// ReplyLike returns ReplyLikeResolver implementation.
func (r *Resolver) ReplyLike() ReplyLikeResolver { return &replyLikeResolver{r} }

type replyLikeResolver struct{ *Resolver }

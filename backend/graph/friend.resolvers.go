package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/FlxdeCat/faREbook-backend/graph/model"
	"github.com/FlxdeCat/faREbook-backend/helper"
	"github.com/FlxdeCat/faREbook-backend/service"
)

// User is the resolver for the user field.
func (r *friendResolver) User(ctx context.Context, obj *model.Friend) (*model.User, error) {
	// panic(fmt.Errorf("not implemented: User - user"))
	return service.GetUser(ctx, obj.UserID)
}

// Friend is the resolver for the friend field.
func (r *friendResolver) Friend(ctx context.Context, obj *model.Friend) (*model.User, error) {
	// panic(fmt.Errorf("not implemented: Friend - friend"))
	return service.GetUser(ctx, obj.FriendID)
}

// RequestFriend is the resolver for the requestFriend field.
func (r *mutationResolver) RequestFriend(ctx context.Context, friend model.NewFriend) (*model.Friend, error) {
	// panic(fmt.Errorf("not implemented: RequestFriend - requestFriend"))
	id, err := helper.ExtractUserIDFromJWT(friend.UserJwt)
	if err != nil {
		return nil, err
	}
	newFriend := &model.Friend{
		UserID:   id,
		FriendID: friend.FriendID,
		Status:   friend.Status,
	}
	return newFriend, r.DB.Create(&newFriend).Error
}

// AcceptFriend is the resolver for the acceptFriend field.
func (r *mutationResolver) AcceptFriend(ctx context.Context, friend model.NewFriend) (*model.Friend, error) {
	// panic(fmt.Errorf("not implemented: AcceptFriend - acceptFriend"))
	id, err := helper.ExtractUserIDFromJWT(friend.UserJwt)
	if err != nil {
		return nil, err
	}
	var updateFriend *model.Friend
	if err := r.DB.First(&updateFriend, "user_id = ? and friend_id = ?", friend.FriendID, id).Error; err != nil {
		return nil, err
	}
	updateFriend.Status = friend.Status
	if err := r.DB.Save(&updateFriend).Error; err != nil {
		return nil, err
	}
	newFriend := &model.Friend{
		UserID:   id,
		FriendID: friend.FriendID,
		Status:   friend.Status,
	}
	return newFriend, r.DB.Create(&newFriend).Error
}

// UpdateFriend is the resolver for the updateFriend field.
func (r *mutationResolver) UpdateFriend(ctx context.Context, friend model.NewFriend) (*model.Friend, error) {
	// panic(fmt.Errorf("not implemented: UpdateFriend - updateFriend"))
	id, err := helper.ExtractUserIDFromJWT(friend.UserJwt)
	if err != nil {
		return nil, err
	}
	var updateFriend *model.Friend
	if err := r.DB.First(&updateFriend, "user_id = ? and friend_id = ?", id, friend.FriendID).Error; err != nil {
		return nil, err
	} else {
		updateFriend.Status = friend.Status
		return updateFriend, r.DB.Save(&updateFriend).Error
	}
}

// RejectFriendRequest is the resolver for the rejectFriendRequest field.
func (r *mutationResolver) RejectFriendRequest(ctx context.Context, friend model.NewFriend) (*model.Friend, error) {
	// panic(fmt.Errorf("not implemented: RejectFriendRequest - rejectFriendRequest"))
	id, err := helper.ExtractUserIDFromJWT(friend.UserJwt)
	if err != nil {
		return nil, err
	}
	var rejectedFriendRequest *model.Friend
	if err := r.DB.First(&rejectedFriendRequest, "user_id = ? and friend_id = ?", friend.FriendID, id).Error; err != nil {
		return nil, err
	}
	return rejectedFriendRequest, r.DB.Delete(&rejectedFriendRequest).Error
}

// RemoveFriend is the resolver for the removeFriend field.
func (r *mutationResolver) RemoveFriend(ctx context.Context, friend model.NewFriend) (*model.Friend, error) {
	// panic(fmt.Errorf("not implemented: RemoveFriend - removeFriend"))
	id, err := helper.ExtractUserIDFromJWT(friend.UserJwt)
	if err != nil {
		return nil, err
	}
	var removedFriend *model.Friend
	if err := r.DB.First(&removedFriend, "user_id = ? and friend_id = ?", id, friend.FriendID).Error; err != nil {
		return nil, err
	}
	if err := r.DB.Delete(&removedFriend).Error; err != nil {
		return nil, err
	}
	var removedOtherFriend *model.Friend
	if err := r.DB.First(&removedOtherFriend, "user_id = ? and friend_id = ?", friend.FriendID, id).Error; err != nil {
		return nil, err
	}
	return removedOtherFriend, r.DB.Delete(&removedOtherFriend).Error
}

// GetUserFriends is the resolver for the getUserFriends field.
func (r *queryResolver) GetUserFriends(ctx context.Context, userID string) ([]*model.Friend, error) {
	// panic(fmt.Errorf("not implemented: GetUserFriends - getUserFriends"))
	var friends []*model.Friend
	return friends, r.DB.Find(&friends, "user_id = ? and not status = 'Request'", userID).Error
}

// GetUserFriendsOnJwt is the resolver for the getUserFriendsOnJWT field.
func (r *queryResolver) GetUserFriendsOnJwt(ctx context.Context, userJwt string) ([]*model.Friend, error) {
	// panic(fmt.Errorf("not implemented: GetUserFriendsOnJwt - getUserFriendsOnJWT"))
	id, err := helper.ExtractUserIDFromJWT(userJwt)
	if err != nil {
		return nil, err
	}
	var friends []*model.Friend
	return friends, r.DB.Find(&friends, "user_id = ? and not status = 'Request'", id).Error
}

// GetAllUserFriends is the resolver for the getAllUserFriends field.
func (r *queryResolver) GetAllUserFriends(ctx context.Context) ([]*model.Friend, error) {
	// panic(fmt.Errorf("not implemented: GetAllUserFriends - getAllUserFriends"))
	var friends []*model.Friend
	return friends, r.DB.Find(&friends, "not status = 'Request'").Error
}

// GetUserFriendRequests is the resolver for the getUserFriendRequests field.
func (r *queryResolver) GetUserFriendRequests(ctx context.Context, jwt string) ([]*model.Friend, error) {
	// panic(fmt.Errorf("not implemented: GetUserFriendRequests - getUserFriendRequests"))
	id, err := helper.ExtractUserIDFromJWT(jwt)
	if err != nil {
		return nil, err
	}
	var friends []*model.Friend
	return friends, r.DB.Find(&friends, "friend_id = ? and status = 'Request'", id).Error
}

// GetFriendStatus is the resolver for the getFriendStatus field.
func (r *queryResolver) GetFriendStatus(ctx context.Context, userJwt string, friendID string) (string, error) {
	// panic(fmt.Errorf("not implemented: GetFriendStatus - getFriendStatus"))
	id, err := helper.ExtractUserIDFromJWT(userJwt)
	if err != nil {
		return "None", nil
	}
	if id == friendID {
		return "None", nil
	}
	var friend *model.Friend
	if err := r.DB.First(&friend, "user_id = ? and friend_id = ?", id, friendID).Error; err == nil {
		return friend.Status.String(), nil
	}
	var otherFriend *model.Friend
	if err := r.DB.First(&otherFriend, "user_id = ? and friend_id = ?", friendID, id).Error; err == nil {
		if otherFriend.Status.String() == "Request" {
			return "Requested", nil
		}
	}
	return "None", nil
}

// GetPotentialFriend is the resolver for the getPotentialFriend field.
func (r *queryResolver) GetPotentialFriend(ctx context.Context, userID string) ([]*model.User, error) {
	// panic(fmt.Errorf("not implemented: GetPotentialFriend - getPotentialFriend"))
	var potentialFriends []*model.User
	var userFriends []*model.Friend
	if err := r.DB.Find(&userFriends, "user_id = ? and status != 'Request'", userID).Error; err != nil {
		return potentialFriends, nil
	}
	for _, userFriend := range userFriends {
		var userFriendFriends []*model.Friend
		if err := r.DB.Find(&userFriendFriends, "user_id = ? and status != 'Request'", userFriend.FriendID).Error; err != nil {
			continue
		}
		for _, userFriendFriend := range userFriendFriends {
			if userID == userFriendFriend.FriendID {
				continue
			}
			var checkUserFriendFriend *model.Friend
			if err := r.DB.First(&checkUserFriendFriend, "user_id = ? and friend_id = ?", userID, userFriendFriend.FriendID).Error; err != nil {
				var checkRemoveSuggestion *model.RemoveSuggestion
				if err := r.DB.First(&checkRemoveSuggestion, "user_id = ? and to_id = ?", userID, userFriendFriend.FriendID).Error; err == nil {
					continue
				}
				var checkUserFriendFriendRequest *model.Friend
				if err := r.DB.First(&checkUserFriendFriendRequest, "user_id = ? and friend_id = ?", userFriendFriend.FriendID, userID).Error; err == nil {
					continue
				}
				var potentialFriend *model.User
				if err := r.DB.First(&potentialFriend, "id = ?", userFriendFriend.FriendID).Error; err == nil {
					for _, p := range potentialFriends {
						if potentialFriend.ID == p.ID {
							continue
						}
					}
					potentialFriends = append(potentialFriends, potentialFriend)
					if len(potentialFriends) == 5 {
						return potentialFriends, nil
					}
				}
			}
		}
	}
	return potentialFriends, nil
}

// GetFriendCount is the resolver for the getFriendCount field.
func (r *queryResolver) GetFriendCount(ctx context.Context, userID string) (int, error) {
	// panic(fmt.Errorf("not implemented: GetFriendCount - getFriendCount"))
	var friends []*model.Friend
	if err := r.DB.Find(&friends, "user_id = ?", userID).Error; err != nil {
		return 0, nil
	}
	return len(friends), nil
}

// GetMutualCount is the resolver for the getMutualCount field.
func (r *queryResolver) GetMutualCount(ctx context.Context, userJwt string, friendID string) (int, error) {
	// panic(fmt.Errorf("not implemented: GetMutualCount - getMutualCount"))
	id, err := helper.ExtractUserIDFromJWT(userJwt)
	if err != nil {
		return -1, nil
	}
	var friends []*model.Friend
	if err := r.DB.Find(&friends, "user_id = ?", id).Error; err != nil {
		return 0, nil
	}
	var otherFriends []*model.Friend
	if err := r.DB.Find(&otherFriends, "user_id = ?", friendID).Error; err != nil {
		return 0, nil
	}
	count := 0
	for _, friend := range friends {
		for _, otherFriend := range otherFriends {
			if friend.FriendID == otherFriend.FriendID {
				count += 1
			}
		}
	}
	return count, nil
}

// GetUserFriendNotGroupMember is the resolver for the getUserFriendNotGroupMember field.
func (r *queryResolver) GetUserFriendNotGroupMember(ctx context.Context, userJwt string, groupID string) ([]*model.Friend, error) {
	// panic(fmt.Errorf("not implemented: GetUserFriendNotGroupMember - getUserFriendNotGroupMember"))
	id, err := helper.ExtractUserIDFromJWT(userJwt)
	if err != nil {
		return nil, err
	}
	var friends []*model.Friend
	if err := r.DB.Find(&friends, "user_id = ? and not status = 'Request'", id).Error; err != nil {
		return nil, err
	}
	var inviteFriendList []*model.Friend
	for _, friend := range friends {
		var groupMember *model.GroupMember
		if err := r.DB.First(&groupMember, "user_id = ? and group_id = ?", friend.FriendID, groupID).Error; err != nil {
			inviteFriendList = append(inviteFriendList, friend)
		}
	}
	return inviteFriendList, nil
}

// GetAllFriendData is the resolver for the getAllFriendData field.
func (r *queryResolver) GetAllFriendData(ctx context.Context) ([]*model.Friend, error) {
	// panic(fmt.Errorf("not implemented: GetAllFriendData - getAllFriendData"))
	var friends []*model.Friend
	return friends, r.DB.Find(&friends).Error
}

// Friend returns FriendResolver implementation.
func (r *Resolver) Friend() FriendResolver { return &friendResolver{r} }

type friendResolver struct{ *Resolver }

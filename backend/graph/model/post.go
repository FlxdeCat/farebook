// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type NewPost struct {
	UserJwt string   `json:"userJWT"`
	GroupID *string   `json:"groupID"`
	PostTag []string `json:"postTag" gorm:"json"`
	Content string   `json:"content"`
	Type    PostType `json:"type"`
}

type Post struct {
	ID        string    `json:"id" gorm:"primaryKey"`
	Poster    *User     `json:"poster"`
	PosterID  string    `json:"posterID"`
	Group 	  *Group    `json:"group"`
	GroupID   *string   `json:"groupID" gorm:"default:null"`
	PostTag   []string  `json:"postTag" gorm:"json"`
	Content   string    `json:"content"`
	Type      PostType  `json:"type"`
	CreatedAt time.Time `json:"createdAt"`
}

type PostType string

const (
	PostTypePublic  PostType = "Public"
	PostTypeFriend  PostType = "Friend"
	PostTypePrivate PostType = "Private"
)

var AllPostType = []PostType{
	PostTypePublic,
	PostTypeFriend,
	PostTypePrivate,
}

func (e PostType) IsValid() bool {
	switch e {
	case PostTypePublic, PostTypeFriend, PostTypePrivate:
		return true
	}
	return false
}

func (e PostType) String() string {
	return string(e)
}

func (e *PostType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PostType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PostType", str)
	}
	return nil
}

func (e PostType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type GroupMember struct {
	GroupID string            `json:"groupID" gorm:"constraint:OnDelete:CASCADE"`
	Group   *Group            `json:"group"`
	UserID  string            `json:"userID"`
	User    *User             `json:"user"`
	Status  GroupMemberStatus `json:"status"`
}

type NewGroupMember struct {
	GroupID string            `json:"groupID"`
	UserID  string            `json:"userID"`
	Status  GroupMemberStatus `json:"status"`
}

type GroupMemberStatus string

const (
	GroupMemberStatusAdmin   GroupMemberStatus = "Admin"
	GroupMemberStatusMember  GroupMemberStatus = "Member"
	GroupMemberStatusRequest GroupMemberStatus = "Request"
	GroupMemberStatusInvite  GroupMemberStatus = "Invite"
	GroupMemberStatusNone    GroupMemberStatus = "None"
)

var AllGroupMemberStatus = []GroupMemberStatus{
	GroupMemberStatusAdmin,
	GroupMemberStatusMember,
	GroupMemberStatusRequest,
	GroupMemberStatusInvite,
	GroupMemberStatusNone,
}

func (e GroupMemberStatus) IsValid() bool {
	switch e {
	case GroupMemberStatusAdmin, GroupMemberStatusMember, GroupMemberStatusRequest, GroupMemberStatusInvite, GroupMemberStatusNone:
		return true
	}
	return false
}

func (e GroupMemberStatus) String() string {
	return string(e)
}

func (e *GroupMemberStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GroupMemberStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GroupMemberStatus", str)
	}
	return nil
}

func (e GroupMemberStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

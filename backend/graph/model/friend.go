// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Friend struct {
	UserID   string       `json:"userID" gorm:"primaryKey"`
	User     *User        `json:"user"`
	FriendID string       `json:"friendID" gorm:"primaryKey"`
	Friend   *User        `json:"friend"`
	Status   FriendStatus `json:"status"`
}

type NewFriend struct {
	UserJwt  string       `json:"userJWT"`
	FriendID string       `json:"friendID"`
	Status   FriendStatus `json:"status"`
}

type FriendStatus string

const (
	FriendStatusClose   FriendStatus = "Close"
	FriendStatusNormal  FriendStatus = "Normal"
	FriendStatusRequest FriendStatus = "Request"
	FriendStatusNone    FriendStatus = "None"
)

var AllFriendStatus = []FriendStatus{
	FriendStatusClose,
	FriendStatusNormal,
	FriendStatusRequest,
	FriendStatusNone,
}

func (e FriendStatus) IsValid() bool {
	switch e {
	case FriendStatusClose, FriendStatusNormal, FriendStatusRequest, FriendStatusNone:
		return true
	}
	return false
}

func (e FriendStatus) String() string {
	return string(e)
}

func (e *FriendStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FriendStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FriendStatus", str)
	}
	return nil
}

func (e FriendStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type NewGroup struct {
	Name    string       `json:"name"`
	Privacy GroupPrivacy `json:"privacy"`
}

type Group struct {
	ID      string       `json:"id" gorm:"constraint:OnDelete:CASCADE"`
	Name    string       `json:"name"`
	Privacy GroupPrivacy `json:"privacy"`
}

type GroupPrivacy string

const (
	GroupPrivacyPublic  GroupPrivacy = "Public"
	GroupPrivacyPrivate GroupPrivacy = "Private"
)

var AllGroupPrivacy = []GroupPrivacy{
	GroupPrivacyPublic,
	GroupPrivacyPrivate,
}

func (e GroupPrivacy) IsValid() bool {
	switch e {
	case GroupPrivacyPublic, GroupPrivacyPrivate:
		return true
	}
	return false
}

func (e GroupPrivacy) String() string {
	return string(e)
}

func (e *GroupPrivacy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GroupPrivacy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GroupPrivacy", str)
	}
	return nil
}

func (e GroupPrivacy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

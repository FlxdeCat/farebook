package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"time"

	"github.com/FlxdeCat/faREbook-backend/graph/model"
	"github.com/FlxdeCat/faREbook-backend/helper"
	"github.com/FlxdeCat/faREbook-backend/service"
	"github.com/google/uuid"
)

// Post is the resolver for the post field.
func (r *commentResolver) Post(ctx context.Context, obj *model.Comment) (*model.Post, error) {
	// panic(fmt.Errorf("not implemented: Post - post"))
	return service.GetPost(ctx, obj.PostID)
}

// Commenter is the resolver for the commenter field.
func (r *commentResolver) Commenter(ctx context.Context, obj *model.Comment) (*model.User, error) {
	// panic(fmt.Errorf("not implemented: Commenter - commenter"))
	return service.GetUser(ctx, obj.CommenterID)
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, newComment model.NewComment) (*model.Comment, error) {
	// panic(fmt.Errorf("not implemented: CreateComment - createComment"))
	id, err := helper.ExtractUserIDFromJWT(newComment.UserJwt)
	if err != nil {
		return nil, err
	}
	comment := &model.Comment{
		ID:          uuid.NewString(),
		CommenterID: id,
		PostID:      newComment.PostID,
		Content:     newComment.Content,
		CreatedAt:   time.Now(),
	}
	return comment, r.DB.Create(&comment).Error
}

// GetPostComment is the resolver for the getPostComment field.
func (r *queryResolver) GetPostComment(ctx context.Context, postID string) ([]*model.Comment, error) {
	// panic(fmt.Errorf("not implemented: GetPostComment - getPostComment"))
	var comments []*model.Comment
	if err := r.DB.Order("created_at DESC").Find(&comments, "post_id = ?", postID).Error; err != nil {
		return nil, err
	}
	return comments, nil
}

// GetPostComments is the resolver for the getPostComments field.
func (r *queryResolver) GetPostComments(ctx context.Context, postID string) (int, error) {
	// panic(fmt.Errorf("not implemented: GetPostComments - getPostComments"))
	var comments []*model.Comment
	if err := r.DB.Order("created_at DESC").Find(&comments, "post_id = ?", postID).Error; err != nil {
		return 0, nil
	}
	return len(comments), nil
}

// Comment returns CommentResolver implementation.
func (r *Resolver) Comment() CommentResolver { return &commentResolver{r} }

type commentResolver struct{ *Resolver }

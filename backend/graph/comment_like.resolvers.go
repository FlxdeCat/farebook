package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/FlxdeCat/faREbook-backend/graph/model"
	"github.com/FlxdeCat/faREbook-backend/helper"
	"github.com/FlxdeCat/faREbook-backend/service"
)

// Comment is the resolver for the comment field.
func (r *commentLikeResolver) Comment(ctx context.Context, obj *model.CommentLike) (*model.Comment, error) {
	// panic(fmt.Errorf("not implemented: Comment - comment"))
	return service.GetComment(ctx, obj.CommentID)
}

// User is the resolver for the user field.
func (r *commentLikeResolver) User(ctx context.Context, obj *model.CommentLike) (*model.User, error) {
	// panic(fmt.Errorf("not implemented: User - user"))
	return service.GetUser(ctx, obj.UserID)
}

// LikeComment is the resolver for the likeComment field.
func (r *mutationResolver) LikeComment(ctx context.Context, newCommentLike model.NewCommentLike) (*model.CommentLike, error) {
	// panic(fmt.Errorf("not implemented: LikeComment - likeComment"))
	id, err := helper.ExtractUserIDFromJWT(newCommentLike.UserJwt)
	if err != nil {
		return nil, err
	}
	commentLike := &model.CommentLike{
		UserID:    id,
		CommentID: newCommentLike.CommentID,
	}
	return commentLike, r.DB.Create(&commentLike).Error
}

// UnlikeComment is the resolver for the unlikeComment field.
func (r *mutationResolver) UnlikeComment(ctx context.Context, newCommentLike model.NewCommentLike) (bool, error) {
	// panic(fmt.Errorf("not implemented: UnlikeComment - unlikeComment"))
	id, err := helper.ExtractUserIDFromJWT(newCommentLike.UserJwt)
	if err != nil {
		return false, err
	}
	var commentLike *model.CommentLike
	return true, r.DB.Delete(&commentLike, "user_id = ? and comment_id = ?", id, newCommentLike.CommentID).Error
}

// GetUserLikeComment is the resolver for the getUserLikeComment field.
func (r *queryResolver) GetUserLikeComment(ctx context.Context, newCommentLike model.NewCommentLike) (bool, error) {
	// panic(fmt.Errorf("not implemented: GetUserLikeComment - getUserLikeComment"))
	id, err := helper.ExtractUserIDFromJWT(newCommentLike.UserJwt)
	if err != nil {
		return false, nil
	}
	var commentLike *model.CommentLike
	if err := r.DB.First(&commentLike, "user_id = ? and comment_id = ?", id, newCommentLike.CommentID).Error; err != nil {
		return false, nil
	} else {
		return true, nil
	}
}

// GetCommentLikes is the resolver for the getCommentLikes field.
func (r *queryResolver) GetCommentLikes(ctx context.Context, commentID string) (int, error) {
	// panic(fmt.Errorf("not implemented: GetCommentLikes - getCommentLikes"))
	var commentLikes []*model.CommentLike
	if err := r.DB.Find(&commentLikes, "comment_id = ?", commentID).Error; err != nil {
		return 0, nil
	}
	return len(commentLikes), nil
}

// CommentLike returns CommentLikeResolver implementation.
func (r *Resolver) CommentLike() CommentLikeResolver { return &commentLikeResolver{r} }

type commentLikeResolver struct{ *Resolver }

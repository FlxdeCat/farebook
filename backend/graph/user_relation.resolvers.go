package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/FlxdeCat/faREbook-backend/graph/model"
	"github.com/FlxdeCat/faREbook-backend/helper"
)

// BlockUserNotification is the resolver for the blockUserNotification field.
func (r *mutationResolver) BlockUserNotification(ctx context.Context, relation model.Relation) (*model.BlockNotification, error) {
	// panic(fmt.Errorf("not implemented: BlockUserNotification - blockUserNotification"))
	id, err := helper.ExtractUserIDFromJWT(relation.UserJwt)
	if err != nil {
		return nil, err
	}
	newBlock := &model.BlockNotification{
		UserID: id,
		ToID:   relation.ToID,
	}
	return newBlock, r.DB.Create(&newBlock).Error
}

// UnblockUserNotification is the resolver for the unblockUserNotification field.
func (r *mutationResolver) UnblockUserNotification(ctx context.Context, relation model.Relation) (*model.BlockNotification, error) {
	// panic(fmt.Errorf("not implemented: UnblockUserNotification - unblockUserNotification"))
	id, err := helper.ExtractUserIDFromJWT(relation.UserJwt)
	if err != nil {
		return nil, err
	}
	var block *model.BlockNotification
	return block, r.DB.Delete(&block, "user_id = ? and to_id = ?", id, relation.ToID).Error
}

// RemoveUserSuggestion is the resolver for the removeUserSuggestion field.
func (r *mutationResolver) RemoveUserSuggestion(ctx context.Context, relation model.Relation) (*model.RemoveSuggestion, error) {
	// panic(fmt.Errorf("not implemented: RemoveUserSuggestion - removeUserSuggestion"))
	id, err := helper.ExtractUserIDFromJWT(relation.UserJwt)
	if err != nil {
		return nil, err
	}
	newRemove := &model.RemoveSuggestion{
		UserID: id,
		ToID:   relation.ToID,
	}
	return newRemove, r.DB.Create(&newRemove).Error
}

// ApplyUserSuggestion is the resolver for the applyUserSuggestion field.
func (r *mutationResolver) ApplyUserSuggestion(ctx context.Context, relation model.Relation) (*model.RemoveSuggestion, error) {
	// panic(fmt.Errorf("not implemented: ApplyUserSuggestion - applyUserSuggestion"))
	id, err := helper.ExtractUserIDFromJWT(relation.UserJwt)
	if err != nil {
		return nil, err
	}
	var suggestion *model.RemoveSuggestion
	return suggestion, r.DB.Delete(&suggestion, "user_id = ? and to_id = ?", id, relation.ToID).Error
}

// GetBlockUserNotification is the resolver for the getBlockUserNotification field.
func (r *queryResolver) GetBlockUserNotification(ctx context.Context, relation model.Relation) (bool, error) {
	// panic(fmt.Errorf("not implemented: GetBlockUserNotification - getBlockUserNotification"))
	id, err := helper.ExtractUserIDFromJWT(relation.UserJwt)
	if err != nil {
		return false, nil
	}
	var block *model.BlockNotification
	if err := r.DB.First(&block, "user_id = ? and to_id = ?", id, relation.ToID).Error; err != nil {
		return false, nil
	} else {
		return true, nil
	}
}

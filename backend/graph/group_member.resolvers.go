package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/FlxdeCat/faREbook-backend/graph/model"
	"github.com/FlxdeCat/faREbook-backend/helper"
	"github.com/FlxdeCat/faREbook-backend/service"
)

// Group is the resolver for the group field.
func (r *groupMemberResolver) Group(ctx context.Context, obj *model.GroupMember) (*model.Group, error) {
	// panic(fmt.Errorf("not implemented: Group - group"))
	return service.GetGroup(ctx, obj.GroupID)
}

// User is the resolver for the user field.
func (r *groupMemberResolver) User(ctx context.Context, obj *model.GroupMember) (*model.User, error) {
	// panic(fmt.Errorf("not implemented: User - user"))
	return service.GetUser(ctx, obj.UserID)
}

// CreateGroupMember is the resolver for the createGroupMember field.
func (r *mutationResolver) CreateGroupMember(ctx context.Context, newGroupMember model.NewGroupMember) (*model.GroupMember, error) {
	// panic(fmt.Errorf("not implemented: CreateGroupMember - createGroupMember"))
	groupMember := &model.GroupMember{
		UserID:  newGroupMember.UserID,
		GroupID: newGroupMember.GroupID,
		Status:  newGroupMember.Status,
	}
	return groupMember, r.DB.Create(&groupMember).Error
}

// EditGroupMember is the resolver for the editGroupMember field.
func (r *mutationResolver) EditGroupMember(ctx context.Context, newGroupMember model.NewGroupMember) (*model.GroupMember, error) {
	// panic(fmt.Errorf("not implemented: EditGroupMember - editGroupMember"))
	var deleteGroupMember *model.GroupMember
	if err := r.DB.Delete(&deleteGroupMember, "user_id = ? and group_id = ?", newGroupMember.UserID, newGroupMember.GroupID).Error; err != nil {
		return nil, err
	}
	groupMember := &model.GroupMember{
		UserID:  newGroupMember.UserID,
		GroupID: newGroupMember.GroupID,
		Status:  newGroupMember.Status,
	}
	return groupMember, r.DB.Create(&groupMember).Error
}

// DeleteGroupMember is the resolver for the deleteGroupMember field.
func (r *mutationResolver) DeleteGroupMember(ctx context.Context, newGroupMember model.NewGroupMember) (bool, error) {
	// panic(fmt.Errorf("not implemented: DeleteGroupMember - deleteGroupMember"))
	var groupMember *model.GroupMember
	if err := r.DB.Delete(&groupMember, "user_id = ? and group_id = ?", newGroupMember.UserID, newGroupMember.GroupID).Error; err != nil {
		return false, err
	}
	return true, nil
}

// AdminLeaveGroup is the resolver for the adminLeaveGroup field.
func (r *mutationResolver) AdminLeaveGroup(ctx context.Context, newGroupMember model.NewGroupMember) (bool, error) {
	// panic(fmt.Errorf("not implemented: AdminLeaveGroup - adminLeaveGroup"))
	var groupMemberCount []*model.GroupMember
	if err := r.DB.Find(&groupMemberCount, "(status = 'Admin' or status = 'Member') and group_id = ?", newGroupMember.GroupID).Error; err != nil {
		return false, err
	}
	if len(groupMemberCount) == 1 {
		var deleteGroupMember []*model.GroupMember
		if err := r.DB.Delete(&deleteGroupMember, "group_id = ?", newGroupMember.GroupID).Error; err != nil {
			return false, err
		}
		var deleteGroup *model.Group
		if err := r.DB.Delete(&deleteGroup, "id = ?", newGroupMember.GroupID).Error; err != nil {
			return false, err
		}
		return true, nil
	}
	var adminGroupMemberCount []*model.GroupMember
	if err := r.DB.Find(&adminGroupMemberCount, "status = 'Admin' and group_id = ?", newGroupMember.GroupID).Error; err != nil {
		return false, err
	}
	if len(adminGroupMemberCount) == 1 {
		return false, fmt.Errorf("there must be another admin in the group")
	}
	var deleteGroupMember *model.GroupMember
	if err := r.DB.Delete(&deleteGroupMember, "user_id = ? and group_id = ?", newGroupMember.UserID, newGroupMember.GroupID).Error; err != nil {
		return false, err
	}
	return true, nil
}

// GetGroupMember is the resolver for the getGroupMember field.
func (r *queryResolver) GetGroupMember(ctx context.Context, groupID string, userJwt string) (*model.GroupMember, error) {
	// panic(fmt.Errorf("not implemented: GetGroupMember - getGroupMember"))
	id, err := helper.ExtractUserIDFromJWT(userJwt)
	if err != nil {
		return nil, err
	}
	var groupMember *model.GroupMember
	if err := r.DB.First(&groupMember, "user_id = ? and group_id = ?", id, groupID).Error; err != nil {
		return nil, err
	}
	return groupMember, nil
}

// GetAllGroupMember is the resolver for the getAllGroupMember field.
func (r *queryResolver) GetAllGroupMember(ctx context.Context, groupID string) ([]*model.GroupMember, error) {
	// panic(fmt.Errorf("not implemented: GetAllGroupMember - getAllGroupMember"))
	var groupMembers []*model.GroupMember
	return groupMembers, r.DB.Find(&groupMembers, "(status = 'Admin' or status = 'Member') and group_id = ?", groupID).Error
}

// GetAllGroupMemberCount is the resolver for the getAllGroupMemberCount field.
func (r *queryResolver) GetAllGroupMemberCount(ctx context.Context, groupID string) (int, error) {
	// panic(fmt.Errorf("not implemented: GetAllGroupMemberCount - getAllGroupMemberCount"))
	var groupMembers []*model.GroupMember
	if err := r.DB.Find(&groupMembers, "(status = 'Admin' or status = 'Member') and group_id = ?", groupID).Error; err != nil {
		return 0, nil
	}
	return len(groupMembers), nil
}

// GetAllGroupMemberRequest is the resolver for the getAllGroupMemberRequest field.
func (r *queryResolver) GetAllGroupMemberRequest(ctx context.Context, groupID string) ([]*model.GroupMember, error) {
	// panic(fmt.Errorf("not implemented: GetAllGroupMemberRequest - getAllGroupMemberRequest"))
	var groupMembers []*model.GroupMember
	return groupMembers, r.DB.Find(&groupMembers, "group_id = ? and status = 'Request'", groupID).Error
}

// GetAllGroupInvitation is the resolver for the getAllGroupInvitation field.
func (r *queryResolver) GetAllGroupInvitation(ctx context.Context, userJwt string) ([]*model.GroupMember, error) {
	// panic(fmt.Errorf("not implemented: GetAllGroupInvitation - getAllGroupInvitation"))
	id, err := helper.ExtractUserIDFromJWT(userJwt)
	if err != nil {
		return nil, err
	}
	var groupMembers []*model.GroupMember
	return groupMembers, r.DB.Find(&groupMembers, "user_id = ? and status = 'Invite'", id).Error
}

// GetAllJoinedGroup is the resolver for the getAllJoinedGroup field.
func (r *queryResolver) GetAllJoinedGroup(ctx context.Context, userJwt string) ([]*model.GroupMember, error) {
	// panic(fmt.Errorf("not implemented: GetAllJoinedGroup - getAllJoinedGroup"))
	id, err := helper.ExtractUserIDFromJWT(userJwt)
	if err != nil {
		return nil, err
	}
	var joinedGroups []*model.GroupMember
	if err := r.DB.Find(&joinedGroups, "(status = 'Admin' or status = 'Member') and user_id = ?", id).Error; err != nil {
		return joinedGroups, nil
	}
	return joinedGroups, nil
}

// GroupMember returns GroupMemberResolver implementation.
func (r *Resolver) GroupMember() GroupMemberResolver { return &groupMemberResolver{r} }

type groupMemberResolver struct{ *Resolver }
